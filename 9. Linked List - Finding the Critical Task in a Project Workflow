9. Linked List - Finding the Critical Task in a Project Workflow
import java.io.*;
import java.util.*;

class Node{
    int taskid;
    Node next;
    
    Node(int taskid)
    {
        this.taskid=taskid;
        this.next=null;
    }
}


public class Solution {
    Node head;
    
    public void insertatend(int taskid){
        Node newNode=new Node(taskid);
        if(head==null)
        {
            head=newNode;
            return;
        }
        else{
            Node temp=head;
            while(temp.next!=null)
            {
                temp=temp.next;
            }
            temp.next=newNode;
        }
    }

    
    public void display(){
       if(head==null)  //check head is null or not
       {
           return;
       }
        Node temp=head;
        int count=0;  //we need to count then only we find middle task
        while(temp!=null)
        {
            count++;   //count will increase until reaches the last
            temp=temp.next;  // it goes to last
        }
        int midIndex=count/2;  //to find middle 
        temp=head;  // agian we come the first element to find middle index
        for(int i=0;i<midIndex;i++)   // we know where to stop that's wy we use for loop
        {
            temp=temp.next;
        }
        while(temp!=null){
            System.out.print(temp.taskid+" ");
            temp=temp.next;
        }
    }
    public static void main(String[] args) {
       Scanner s=new Scanner(System.in);
        Solution l=new Solution();
        
        //number of nodes
        int no=s.nextInt();
        for(int i=0;i<no;i++){
            int id=s.nextInt();
            l.insertatend(id);
        }
        l.display();
    }
}
